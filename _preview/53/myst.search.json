{"version":"1","records":[{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook"},"content":"\n\n\n\n\n\n\n\n\n\nThis Project Pythia Cookbook focuses on analyzing, visualizing, and interpreting MPAS model output on the unstructured voronoi mesh, as well as exploring MPAS-JEDI data assimilation results in both the model and observation spaces.\n\nDisclaimer: This cookbook does NOT cover how to run MPAS or JEDI. Readers are encourage to visit \n\nMPAS or \n\nJEDI websites for more details.","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":2},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl2":"Motivation"},"content":"NOAA’s next generation Rapid Refresh Forecast System (\n\nRRFS) is built on the MPAS (Model for Prediction Accross Scals) Model and the JEDI (Joint Effort for Data assimilation Integration) system. While both MPAS and JEDI are powerful tools, they can also be complex to use and interpret. This cookbook will demonstrate how to explore MPAS output and MPAS-JEDI analyses directly on the unstructed voronoi mesh using the \n\nUXarray package. It also includes examples for examining JEDI analyses in observation space.","type":"content","url":"/#motivation","position":3},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":4},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl2":"Authors"},"content":"Guoqing Ge (CIRES/NOAA GSL)\n\nOrhan Eroglu (NSF NCAR)","type":"content","url":"/#authors","position":5},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":6},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":7},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":8},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl2":"Structure"},"content":"This cookbook is broken into three sections:\n\nIntroduction\n\nMPAS(regional) Analysis and Visualization\n\nJEDI(MPAS) Analysis and Visulization","type":"content","url":"/#structure","position":9},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Section 1. Introduction","lvl2":"Structure"},"type":"lvl3","url":"/#section-1-introduction","position":10},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Section 1. Introduction","lvl2":"Structure"},"content":"The introduction part will provide a quick overview about MPAS, JEDI and RRFS(v2).","type":"content","url":"/#section-1-introduction","position":11},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Section 2. MPAS (regional) Analysis and Visualization","lvl2":"Structure"},"type":"lvl3","url":"/#section-2-mpas-regional-analysis-and-visualization","position":12},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Section 2. MPAS (regional) Analysis and Visualization","lvl2":"Structure"},"content":"This part will demonstrate how to make basic and advanced MPAS analysis and visulazation using UXarray.","type":"content","url":"/#section-2-mpas-regional-analysis-and-visualization","position":13},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Section 3. MPAS-JEDI Analysis and Visualization","lvl2":"Structure"},"type":"lvl3","url":"/#section-3-mpas-jedi-analysis-and-visualization","position":14},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Section 3. MPAS-JEDI Analysis and Visualization","lvl2":"Structure"},"content":"This part will demonstrate how to explore MPAS-JEDI data assimilation results in both the model and observation spaces.","type":"content","url":"/#section-3-mpas-jedi-analysis-and-visualization","position":15},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":16},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\nBinder or on your local machine.","type":"content","url":"/#running-the-notebooks","position":17},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":18},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a Jupyter Notebook is through \n\nBinder, which enables the execution of a \n\nJupyter Book in the cloud. All you need to know is how to launch a Pythia Cookbooks chapter via Binder. Simply navigate your mouse to the top right corner of the book chapter you are viewing and click on the rocket ship icon, and be sure to select “launch Binder”. After a moment you should be presented with a notebook that you can interact with. I.e. you’ll be able to execute and even change the example programs. You’ll see that the code cells have no output at first, until you execute them by pressing Shift+Enter. Complete details on how to interact with a live Jupyter notebook are described in \n\nGetting Started with Jupyter.\n\nNote, not all Cookbook chapters are executable. If you do not see the rocket ship icon, such as on this page, you are not viewing an executable book chapter.","type":"content","url":"/#running-on-binder","position":19},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":20},{"hierarchy":{"lvl1":"MPAS+JEDI Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\nClone the https://github.com/ProjectPythia/mpas-jedi-cookbook repository: git clone https://github.com/ProjectPythia/mpas-jedi-cookbook\n\nMove into the mpas-jedi-cookbook directorycd mpas-jedi-cookbook\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate mpas-jedi-cookbook\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":21},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in this Project Pythia Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source:\n\n","type":"content","url":"/notebooks/how-to-cite","position":1},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space"},"type":"lvl1","url":"/notebooks/jedi-mpas","position":0},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space"},"content":"","type":"content","url":"/notebooks/jedi-mpas","position":1},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"In this section, you’ll learn:"},"type":"lvl4","url":"/notebooks/jedi-mpas#in-this-section-youll-learn","position":2},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"In this section, you’ll learn:"},"content":"Utilizing UXarry to compute analysis increments, visualize increments in horizontal and vertical cross sections\n### Related Documentation\n\n* [URL title](URL)\n* \n","type":"content","url":"/notebooks/jedi-mpas#in-this-section-youll-learn","position":3},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"Prerequisites"},"type":"lvl4","url":"/notebooks/jedi-mpas#prerequisites","position":4},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nAtmospheric Data Assimilation\n\nHelpful\n\n\n\nTime to learn: 10 minutes\n\n","type":"content","url":"/notebooks/jedi-mpas#prerequisites","position":5},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Import packages"},"type":"lvl3","url":"/notebooks/jedi-mpas#import-packages","position":6},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Import packages"},"content":"\n\n%%time \n\n# autoload external python modules if they changed\n%load_ext autoreload\n%autoreload 2\n\n# add ../funcs to the current path\nimport sys, os\nsys.path.append(os.path.join(os.getcwd(), \"..\")) \n\n# import modules\nimport warnings\nimport math\n\nimport cartopy.crs as ccrs\nimport geoviews as gv\nimport geoviews.feature as gf\nimport holoviews as hv\nimport hvplot.xarray\nfrom holoviews import opts\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\nimport s3fs\n\nimport geopandas as gp\nimport numpy as np\nimport uxarray as ux\nimport xarray as xr\n\n","type":"content","url":"/notebooks/jedi-mpas#import-packages","position":7},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Configure visualization tools"},"type":"lvl3","url":"/notebooks/jedi-mpas#configure-visualization-tools","position":8},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Configure visualization tools"},"content":"\n\nhv.extension(\"bokeh\")\n# hv.extension(\"matplotlib\")\n\n# common border lines\ncoast_lines = gf.coastline(projection=ccrs.PlateCarree(), line_width=1, scale=\"50m\")\nstate_lines = gf.states(projection=ccrs.PlateCarree(), line_width=1, line_color='gray', scale=\"50m\")\n\n","type":"content","url":"/notebooks/jedi-mpas#configure-visualization-tools","position":9},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Helper functions"},"type":"lvl3","url":"/notebooks/jedi-mpas#helper-functions","position":10},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Helper functions"},"content":"The following functions are used for visualizing the data. The horizontal_contour function generates the contour map for a given slice of data.\n\n# Generates a contour plot for a horizontal slice\ndef horizontal_contour(ux_hslice, title, cmin=None, cmax=None, width=800, height=500, clevs=20, cmap=\"coolwarm\", symmetric_cmap=False):\n    # Get min and max\n    amin = ux_hslice.min().item()\n    amax = ux_hslice.max().item()\n    \n    cmin = math.floor(amin) if(cmin is None) else cmin\n    cmax = math.ceil(amax) if(cmax is None) else cmax\n    \n    if symmetric_cmap:  # get a symmetric color map when cmin < 0, cmax >0\n        cmax = max(abs(cmin), cmax)\n        cmin = -cmax\n\n    if isinstance(cmap, str):\n        cmap = plt.get_cmap(cmap)\n\n    # Generate contour plot\n    title = f\" min={amin:.1f} max={amax:.1f}\"\n    \n    contour_plot = hv.operation.contours(\n        ux_hslice.plot(),\n        levels=np.linspace(cmin, cmax, num=clevs),  # levels=np.arange(cmin, cmax, 0.5)\n        filled=True\n    ).opts(\n        line_color=None,  # line_width=0.001\n        width=width, height=height,\n        cmap=cmap, clim=(cmin, cmax),\n        colorbar=True, show_legend=False,\n        tools=['hover'], title=title\n    )\n\n    return contour_plot\n\n","type":"content","url":"/notebooks/jedi-mpas#helper-functions","position":11},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Retrieve/load  MPAS/JEDI data"},"type":"lvl3","url":"/notebooks/jedi-mpas#retrieve-load-mpas-jedi-data","position":12},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Retrieve/load  MPAS/JEDI data"},"content":"The example MPAS/JEDI data are stored at \n\njetstream2. We need to retreive those data first.There are two ways to retrieve MPAS data:\n\nDownload all example data from JetStream2 to local and them load them locally. This approach allows downloading the data once per machine and reuse it in notebooks.\n\nStream the JetStream2 S3 objects on demand. In this case, each notebook (including restarting a notebook) will retrieve the required data separately as needed.\n\n# choose the data_load_method, check the above cell for details. Default to method 1, i.e. download once and reuse it in multiple notebooks\ndata_load_method = 2  # 1 or 2\n\n","type":"content","url":"/notebooks/jedi-mpas#retrieve-load-mpas-jedi-data","position":13},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"Method 1: Download all example data once and reuse it in mulptile notebooks","lvl3":"Retrieve/load  MPAS/JEDI data"},"type":"lvl4","url":"/notebooks/jedi-mpas#method-1-download-all-example-data-once-and-reuse-it-in-mulptile-notebooks","position":14},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"Method 1: Download all example data once and reuse it in mulptile notebooks","lvl3":"Retrieve/load  MPAS/JEDI data"},"content":"\n\n%%time\nlocal_dir=\"/tmp\"\n\nif data_load_method == 1 and not os.path.exists(local_dir + \"/conus12km/bkg/mpasout.2024-05-06_01.00.00.nc\"):\n    jetstream_url = 'https://js2.jetstream-cloud.org:8001/'\n    fs = s3fs.S3FileSystem(anon=True, asynchronous=False,client_kwargs=dict(endpoint_url=jetstream_url))\n    conus12_path = 's3://pythia/mpas/conus12km'\n    fs.get(conus12_path, local_dir, recursive=True)\n    print(\"Data downloading completed\")\nelse:\n    print(\"Skip..., either data is available in local or data_load_method is NOT 1\")\n\n# Set file path\nif data_load_method == 1:\n    grid_file = local_dir + \"/conus12km/conus12km.invariant.nc_L60_GFS\"\n    ana_file = local_dir + \"/conus12km/bkg/mpasout.2024-05-06_01.00.00.nc\"\n    bkg_file = local_dir + \"/conus12km/ana/mpasout.2024-05-06_01.00.00.nc\"\n\n","type":"content","url":"/notebooks/jedi-mpas#method-1-download-all-example-data-once-and-reuse-it-in-mulptile-notebooks","position":15},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"Method 2: Stream the JetStream2 S3 objects on demand","lvl3":"Retrieve/load  MPAS/JEDI data"},"type":"lvl4","url":"/notebooks/jedi-mpas#method-2-stream-the-jetstream2-s3-objects-on-demand","position":16},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"Method 2: Stream the JetStream2 S3 objects on demand","lvl3":"Retrieve/load  MPAS/JEDI data"},"content":"\n\n%%time\nif data_load_method == 2:\n    jetstream_url = 'https://js2.jetstream-cloud.org:8001/'\n    fs = s3fs.S3FileSystem(anon=True, asynchronous=False,client_kwargs=dict(endpoint_url=jetstream_url))\n    conus12_path = 's3://pythia/mpas/conus12km'\n    \n    grid_url=f\"{conus12_path}/conus12km.invariant.nc_L60_GFS\"\n    bkg_url=f\"{conus12_path}/bkg/mpasout.2024-05-06_01.00.00.nc\"\n    ana_url=f\"{conus12_path}/ana/mpasout.2024-05-06_01.00.00.nc\"\n    \n    grid_file = fs.open(grid_url)\n    ana_file = fs.open(ana_url)\n    bkg_file = fs.open(bkg_url)\nelse:\n    print(\"Skip..., data_load_method is NOT 2\")\n\nWarning\n\nDepending on the network conditions, loading the data can take a few minutes.\n\n","type":"content","url":"/notebooks/jedi-mpas#method-2-stream-the-jetstream2-s3-objects-on-demand","position":17},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"Loading the data into UXarray datasets","lvl3":"Retrieve/load  MPAS/JEDI data"},"type":"lvl4","url":"/notebooks/jedi-mpas#loading-the-data-into-uxarray-datasets","position":18},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl4":"Loading the data into UXarray datasets","lvl3":"Retrieve/load  MPAS/JEDI data"},"content":"We use the UXarray data structures for working with the data. This package supports data defined over unstructured grid and provides utilities for modifying and visualizing it. The available fucntionality are discussed in \n\nUxDataset documentation.\n\nuxds_a = ux.open_dataset(grid_file, ana_file)\nuxds_b = ux.open_dataset(grid_file, bkg_file)\n\n","type":"content","url":"/notebooks/jedi-mpas#loading-the-data-into-uxarray-datasets","position":19},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"compute the analysis increments from the JEDI data assimilation"},"type":"lvl3","url":"/notebooks/jedi-mpas#compute-the-analysis-increments-from-the-jedi-data-assimilation","position":20},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"compute the analysis increments from the JEDI data assimilation"},"content":"JEDI updates the background atmospheric state (uxds_b) with observation innovations and gets a new atmospheric state called analysis (uxds_a).The difference of uxds_a - uxds_b is called “analysis increments”\n\nvar_name = \"theta\"\nuxdiff0 = uxds_a[var_name] - uxds_b[var_name]\nuxvar = uxdiff0\n\n","type":"content","url":"/notebooks/jedi-mpas#compute-the-analysis-increments-from-the-jedi-data-assimilation","position":21},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"plot temperature analysis increments at different levels"},"type":"lvl3","url":"/notebooks/jedi-mpas#plot-temperature-analysis-increments-at-different-levels","position":22},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"plot temperature analysis increments at different levels"},"content":"\n\n## Utility to create ncl style color bars.\n# def make_discrete_cmap(n_colors, base=\"coolwarm\", *, center_white=False):\n#     if center_white and n_colors % 2 == 0:\n#         raise ValueError(\"center_white=True requires an odd n_colors\")\n#     base_cmap  = plt.get_cmap(base)\n#     positions  = np.linspace(0, 1, n_colors)\n#     colours    = base_cmap(positions)\n#     if center_white:\n#         colours[n_colors // 2] = (1.0, 1.0, 1.0, 1.0)\n\n#     suffix = \"_cw\" if center_white else \"\"\n#     return ListedColormap(colours, name=f\"{base}_{n_colors}{suffix}\")\n# # levels = np.arange(-4.0, 4.0 + 0.5, 0.5)\n# cmap   = make_discrete_cmap(base=\"coolwarm\", n_colors=16, center_white=False)\nfrom matplotlib.colors import ListedColormap, BoundaryNorm, to_rgba\n\ndef make_interval_cmap(\n    edges,\n    colors=None,\n    *,\n    base_cmap=\"viridis\",\n    bad=\"none\",\n    under=None,\n    over=None\n):\n    edges = np.asarray(edges, dtype=float)\n    if edges.ndim != 1 or len(edges) < 2:\n        raise ValueError(\"`edges` must be 1D with at least two values.\")\n    if not np.all(np.diff(edges) > 0):\n        raise ValueError(\"`edges` must be strictly increasing.\")\n\n    n_bins = len(edges) - 1\n\n    if colors is None:\n        # sample from a base cmap at bin midpoints\n        cm = plt.get_cmap(base_cmap)\n        mids = 0.5 * (edges[:-1] + edges[1:])\n        # normalize mids to 0..1 based on full range of edges\n        t = (mids - edges[0]) / (edges[-1] - edges[0])\n        cols = cm(t)\n    else:\n        if len(colors) != n_bins:\n            raise ValueError(f\"`colors` must have length {n_bins}.\")\n        cols = [to_rgba(c) for c in colors]\n\n    cmap = ListedColormap(cols, name=\"interval_cmap\")\n\n    if bad != \"none\":\n        cmap.set_bad(bad)\n    if under is not None:\n        cmap.set_under(under)\n    if over is not None:\n        cmap.set_over(over)\n\n    norm = BoundaryNorm(edges, cmap.N, extend=(\"neither\" if (under is None and over is None) else \"both\"))\n    return cmap, norm\n\nedges = [-4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5, 0, 0.5, 1.0, 1.5, 2, 2.5 ,3, 3.5, 4]\n# edges = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]\ncolors = [\n    \"green\",\n    \"blue\",\n    \"#313695\",  # deep navy\n    \"#4575b4\",  # medium blue\n    \"#74add1\",  # light blue\n    \"#abd9e9\",  # pale blue\n    \"#d0f0c0\",  # light green\n    \"#ffffbf\",  # pale yellow\n    \"white\",    # pure white (center)\n    \"#fee090\",  # pale yellow (mirror)\n    \"#f46d43\",  # orange-red\n    \"#d73027\",  # red\n    \"#a50026\",  # deep red\n    \"#800026\",  # darker maroon\n    \"#4d0013\",  # deep maroon\n    \"black\"     # extreme end\n]\n\n\ncmap, norm = make_interval_cmap(edges, colors, bad=\"lightgray\", under=None, over=None)\n\n\n%%time\n\nnt=0  # time dimension\nplot_levels = [0, 19, 29, 39, 42, 49, 58]  # [0, 29, 42]  # [0, 19, 29, 39, 49, 58]\n\nzero_shift = 0.0\n\nplots = []\nfor lev in plot_levels:\n    tmp = horizontal_contour(\n        uxvar.isel(Time=nt, nVertLevels=lev), \n        title=f'lev={lev}',\n        symmetric_cmap=True,\n        cmap =cmap,\n        cmax=4,\n        cmin=4\n        #clevs=20,\n    )  # for the whole domain\n    \n    \n    plots.append(tmp * coast_lines * state_lines)\nfor p in plots:\n   display(p)\n\n# dat.where((dat > 0.1) | (dat < -0.1)),\n\n\n","type":"content","url":"/notebooks/jedi-mpas#plot-temperature-analysis-increments-at-different-levels","position":23},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Zoomed into Colorado using the subset capability"},"type":"lvl3","url":"/notebooks/jedi-mpas#zoomed-into-colorado-using-the-subset-capability","position":24},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"Zoomed into Colorado using the subset capability"},"content":"\n\n%%time\n\nlon_center = -105.03\nlat_center = 39.0\nlon_incr = 5 # degree\nlat_incr = 3 # degree\nlon_bounds = (lon_center - lon_incr, lon_center + lon_incr)\nlat_bounds = (lat_center - lat_incr, lat_center + lat_incr)\n\n### subset to a small domain\nuxdiff1 = uxdiff0.subset.bounding_box(lon_bounds, lat_bounds,)\nuxvar = uxdiff1\n\n\nnt=0  # time dimension\nplot_levels = [0, 29, 42]  # [0, 19, 29, 39, 49, 58]\n\nplots = []\nfor lev in plot_levels:\n    tmp = horizontal_contour(uxvar.isel(Time=nt, nVertLevels=lev), title=f'lev={lev}', width=700, height=500)  # for the subdomain  \n    plots.append(tmp * coast_lines * state_lines .opts(xlim=(lon_bounds[0], lon_bounds[1]), ylim=(lat_bounds[0], lat_bounds[1])))\n\n# plots share one toolbar, which facilitates doing sync'ed zoom-in/out\n# hv.Layout(plots).cols(1)\n\n# each plot has its own toolbar, which facilitates controlling each plot individually\nfor p in plots:\n   display(p)\n\n","type":"content","url":"/notebooks/jedi-mpas#zoomed-into-colorado-using-the-subset-capability","position":25},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl2":"Random Great Circle Arc (GCA)"},"type":"lvl2","url":"/notebooks/jedi-mpas#random-great-circle-arc-gca","position":26},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl2":"Random Great Circle Arc (GCA)"},"content":"\n\n# lat=43.3\n# step_between_points = 100\n\nstart_point = (-110, 20)\nend_point = (-70, 50)\nvar_name = \"theta\"\nuxdiff0 = uxds_a[var_name].isel(Time=0) - uxds_b[var_name].isel(Time=0)\nuxvar = uxdiff0\ncross_section_gca = uxvar.cross_section(start=start_point, end=end_point, steps=100)\n\nhlabelticks = [\n    f\"{abs(lat):.1f}°{'N' if lat >= 0 else 'S'}\\n{abs(lon):.1f}°{'E' if lon >= 0 else 'W'}\"\n    for lat, lon in zip(cross_section_gca['lat'], cross_section_gca['lon'])\n]\n\n# cross_section_gca.isel(Time=0).transpose().plot.contourf()\n%matplotlib inline\n\n\nfig= plt.figure(figsize=(8,3))\ngs= fig.add_gridspec(1,1)\nax = fig.add_subplot(gs[0,0])\ncf=ax.contourf(cross_section_gca.transpose(),cmap='Reds',extend='both')\ntick_stride = 10\nax.set_xticks(cross_section_gca['steps'][::tick_stride])\nax.set_xticklabels(hlabelticks[::tick_stride])\n\n\nlon=-83.3\ncross_section_lon = uxvar.cross_section(lon=lon, steps=100)\n\nhlabelticks = [\n    f\"{abs(lat):.1f}°{'N' if lat >= 0 else 'S'}\" for lat in cross_section_lon['lat']\n]\n\n%matplotlib inline\nfig= plt.figure(figsize=(8,3))\ngs= fig.add_gridspec(1,1)\nax = fig.add_subplot(gs[0,0])\ncf=ax.contourf(cross_section_lon.transpose(),cmap='Reds',extend='both')\n\nax.set_xticks(cross_section_lon['steps'][::tick_stride])\nax.set_xticklabels(hlabelticks[::tick_stride])\n\ncross_section_lon = uxvar.cross_section(lon=-100., steps=100)\ncross_section_lon\n\n","type":"content","url":"/notebooks/jedi-mpas#random-great-circle-arc-gca","position":27},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"save plots to files","lvl2":"Random Great Circle Arc (GCA)"},"type":"lvl3","url":"/notebooks/jedi-mpas#save-plots-to-files","position":28},{"hierarchy":{"lvl1":"Visualization of JEDI analysis with UXarray in the model space","lvl3":"save plots to files","lvl2":"Random Great Circle Arc (GCA)"},"content":"\n\n# hv.save(tmp, 'vslice.png')","type":"content","url":"/notebooks/jedi-mpas#save-plots-to-files","position":29},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space"},"type":"lvl1","url":"/notebooks/jedi-obsspace","position":0},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space"},"content":"","type":"content","url":"/notebooks/jedi-obsspace","position":1},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl3":"In this section, you’ll learn:"},"type":"lvl3","url":"/notebooks/jedi-obsspace#in-this-section-youll-learn","position":2},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl3":"In this section, you’ll learn:"},"content":"Generate data assimilation statistics and visualize them in the observation space\n### Related Documentation\n\n* [URL title](URL)\n* \n","type":"content","url":"/notebooks/jedi-obsspace#in-this-section-youll-learn","position":3},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl3":"Prerequisites"},"type":"lvl3","url":"/notebooks/jedi-obsspace#prerequisites","position":4},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl3":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nAtmospheric Data Assimilation\n\nHelpful\n\n\n\nTime to learn: 10 minutes\n\n","type":"content","url":"/notebooks/jedi-obsspace#prerequisites","position":5},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"Import packages"},"type":"lvl2","url":"/notebooks/jedi-obsspace#import-packages","position":6},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"Import packages"},"content":"\n\n%%time \n\n# autoload external python modules if they changed\n%load_ext autoreload\n%autoreload 2\n\n# import modules\nimport warnings\nimport math\nimport sys\nimport os\n\nimport cartopy.crs as ccrs\nimport geoviews as gv\nimport geoviews.feature as gf\nimport holoviews as hv\nimport hvplot.xarray\nfrom holoviews import opts\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mticker\nimport matplotlib.colors as colors\n\n\nimport s3fs\nimport seaborn as sns  # seaborn handles NaN values automatically\n\nimport geopandas as gp\nimport numpy as np\nimport uxarray as ux\nimport xarray as xr\nimport pandas as pd\n\n","type":"content","url":"/notebooks/jedi-obsspace#import-packages","position":7},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"Configure visualization tools"},"type":"lvl2","url":"/notebooks/jedi-obsspace#configure-visualization-tools","position":8},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"Configure visualization tools"},"content":"\n\nhv.extension(\"bokeh\")\n# hv.extension(\"matplotlib\")\n\n# common border lines\ncoast_lines = gf.coastline(projection=ccrs.PlateCarree(), line_width=1, scale=\"50m\")\nstate_lines = gf.states(projection=ccrs.PlateCarree(), line_width=1, line_color='gray', scale=\"50m\")\n\n","type":"content","url":"/notebooks/jedi-obsspace#configure-visualization-tools","position":9},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"Retrieve JEDI data"},"type":"lvl2","url":"/notebooks/jedi-obsspace#retrieve-jedi-data","position":10},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"Retrieve JEDI data"},"content":"The example JEDI data are stored at \n\njetstream2. We need to retreive those data first.\n\n%%time\nlocal_dir=\"/tmp/conus12km\"\nos.makedirs(local_dir, exist_ok=True)\n\nif not os.path.exists(local_dir + \"/jdiag_cris-fsr_n20.nc\"):\n    jetstream_url = 'https://js2.jetstream-cloud.org:8001/'\n    fs = s3fs.S3FileSystem(anon=True, asynchronous=False,client_kwargs=dict(endpoint_url=jetstream_url))\n    conus12_path = 's3://pythia/mpas/conus12km'\n    fs.get(conus12_path + \"/jdiag_aircar_t133.nc\", local_dir+\"/jdiag_aircar_t133.nc\")\n    fs.get(conus12_path + \"/jdiag_aircar_q133.nc\", local_dir+\"/jdiag_aircar_q133.nc\")\n    fs.get(conus12_path + \"/jdiag_aircar_uv233.nc\", local_dir+\"/jdiag_aircar_uv233.nc\")\n    fs.get(conus12_path + \"/jdiag_cris-fsr_n20.nc\", local_dir+\"/jdiag_cris-fsr_n20.nc\")\n    print(\"Data downloading completed\")\nelse:\n    print(\"Skip..., data is available in local\")\n\nfrom obsSpace import obsSpace, fit_rate, query_data, to_dataframe, query_dataset\n\njdiag_file=local_dir+\"/jdiag_aircar_t133.nc\"\naircar = obsSpace(jdiag_file)\n\nquery_data(aircar.t)\ndf = to_dataframe(aircar.t)\ndf\n\n# plot histogram of OmA\n\nplt.figure(figsize=(8, 5))\n#sns.histplot(df[\"oman\"], bins=50, kde=True, color=\"steelblue\")\nsns.histplot(aircar.t.oman, bins=100, kde=True, color=\"steelblue\")\nplt.title(\"Histogram of oman\")\nplt.xlabel(\"oman values\")\nplt.ylabel(\"Density\")\nplt.tight_layout()\nplt.show()\n\n# overlay OMB and OMA histogram together\n\ndf_long = df[[\"oman\", \"ombg\"]].melt(var_name=\"variable\", value_name=\"value\")\n\nplt.figure(figsize=(8, 5))\nsns.histplot(data=df_long, x=\"value\", hue=\"variable\", bins=50, kde=True, element=\"step\", stat=\"count\")\nplt.title(\"Overlayed Histogram: oman vs ombg\")\nplt.tight_layout()\nplt.show()\n\n# overlay OMB and OMA histogram together\n\nplt.figure(figsize=(8, 5))\nsns.histplot(df[\"oman\"], bins=100, kde=True, color=\"blue\", label=\"oman\", multiple=\"layer\")\nsns.histplot(df[\"ombg\"], bins=100, kde=True, color=\"red\", label=\"ombg\", multiple=\"layer\")\n\nplt.title(\"Overlayed Histogram: oman vs ombg\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Frequency\")\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n","type":"content","url":"/notebooks/jedi-obsspace#retrieve-jedi-data","position":11},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"fit rate and plotting"},"type":"lvl2","url":"/notebooks/jedi-obsspace#fit-rate-and-plotting","position":12},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"fit rate and plotting"},"content":"\n\n# 1. Filter valid data (both 'oman' and 'ombg' are not NaN)\nvalid_df = df[df[\"oman\"].notna() & df[\"ombg\"].notna()].copy()\nvalid_df = valid_df.dropna(subset=[\"height\"])  # removes any rows in valid_df where height is missing (NaN)\nprint(valid_df[valid_df[\"height\"] < 0][\"height\"])   # negative height\n\ndz = 1000\ngrouped = fit_rate(aircar.t, dz=dz)\n\n# 5. Plot vertical profile of fit_rate vs height\nplt.figure(figsize=(7, 6))\nplt.plot(grouped[\"fit_rate\"], grouped[\"height_bin\"], marker=\"o\", color=\"blue\")\n# plt.axvline(x=0, color=\"gray\", linestyle=\"--\")  # ax vertical line\n\nplt.xlabel(\"Fit Rate (%)\")  # label change\nplt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{x*100:.0f}%'))  # format as %\nplt.ylabel(\"Height Bin (m)\")\nplt.title(\"Vertical Profile of Fit Rate\")\n\n# Fine-tune ticks\nplt.xticks(np.arange(0, 0.25, 0.05))  #, fontsize=12)\nplt.yticks(np.arange(0, 13000, dz))  #, , fontsize=12)\n# Add minor ticks\nfrom matplotlib.ticker import AutoMinorLocator\nplt.gca().xaxis.set_minor_locator(AutoMinorLocator())\nplt.gca().yaxis.set_minor_locator(AutoMinorLocator())\n# plt.grid(which='both', linestyle='--', linewidth=0.5)\nplt.grid(True)\n\nplt.ylim(0, 13000)  # set y-axis from 0 (bottom) to 13,000 (top)\nplt.tight_layout()\nplt.show()\n\nprint(grouped[\"height_bin\"])\n\n","type":"content","url":"/notebooks/jedi-obsspace#fit-rate-and-plotting","position":13},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"Plot satellite radiance observations"},"type":"lvl2","url":"/notebooks/jedi-obsspace#plot-satellite-radiance-observations","position":14},{"hierarchy":{"lvl1":"Visualization of JEDI analysis in the observation space","lvl2":"Plot satellite radiance observations"},"content":"\n\n### using a general method\n# from netCDF4 import Dataset\n# dataset = Dataset(local_dir + \"/conus12km/jdiag_cris-fsr_n20.nc\", mode='r')\n# query_dataset(dataset, meta_exclude=\"sensorCentralWavenumber_\")\n# query_dataset(dataset)\n\n### using the obsSpace class \nobsCris = obsSpace(local_dir + \"/jdiag_cris-fsr_n20.nc\")\nquery_data(obsCris.bt, meta_exclude=\"sensorCentralWavenumber_\")\n\nprint(obsCris.bt.hofx0)\n\nncount=0\nidx = []\nidx2 = []\nch=61\nfor n in np.arange(len(obsCris.bt.ombg[:,ch])):\n    #if obsCris.bt.CloudDetectMinResidualIR[n,ch] == 1: \n     if obsCris.bt.ombg[n,ch] > -200 and obsCris.bt.ombg[n,ch] < 200:\n       idx.append(n)\n       ncount = ncount + 1 \n\nlat=obsCris.bt.latitude[idx]\nlon=obsCris.bt.longitude[idx]\nobarray=obsCris.bt.DerivedObsValue[idx,ch]\nprint(lon,lat,obarray)\nprint(ncount)\n\ndatmi = np.nanmin(obarray)  # Min of the data\ndatma = np.nanmax(obarray)  # Max of the data\n\n\nimport matplotlib.pyplot as plt\nif np.nanmin(obarray) < 0:\n  cmax = datma\n  cmin = datmi\n  cmax=310\n  cmin=200\n  #cmax=1.0\n  #cmin=-1.0\n  cmap = 'RdBu'\nelse:\n  #cmax = omean+stdev\n  #cmin = np.maximum(omean-stdev, 0.0)\n  cma = datma\n  cmin = datmi\n  cmax=310\n  cmin=200\n  #cmax=1.0\n  #cmin=-1.0\n  cmap = 'RdBu'\n  cmap = 'viridis'\n  cmap = 'jet'\n\n\n\ncmin = 200.\ncmax = 310.\nconus_12km = [-150, -50, 15, 55]\n\ncolor_map = plt.cm.get_cmap(cmap)\nreversed_color_map = color_map.reversed()\nunits = 'K'\n#units = '%'\n\nfig = plt.figure(figsize=(10, 5))\n\n# Initialize the plot pointing to the projection\n# ------------------------------------------------\nax = plt.axes(projection=ccrs.PlateCarree(central_longitude=0))\n\n# Plot grid lines\n# ----------------\ngl = ax.gridlines(crs=ccrs.PlateCarree(central_longitude=0), draw_labels=True,\n                  linewidth=1, color='gray', alpha=0.5, linestyle='-')\ngl.top_labels = False\ngl.xlabel_style = {'size': 10, 'color': 'black'}\ngl.ylabel_style = {'size': 10, 'color': 'black'}\ngl.xlocator = mticker.FixedLocator(\n   [-180, -135, -90, -45, 0, 45, 90, 135, 179.9])\nax.set_ylabel(\"Latitude\",  fontsize=7)\nax.set_xlabel(\"Longitude\", fontsize=7)\n\n# Get scatter data\n# ------------------\n#print('obarray = ', obarray)\nprint('min/max obarray = ', min(obarray),max(obarray))\n#sc = ax.scatter(lonData, latData,\nsc = ax.scatter(lon, lat,\n                c=obarray, s=4, linewidth=0,\n                transform=ccrs.PlateCarree(), cmap=cmap, vmin=cmin, vmax = cmax, norm=None, antialiased=True)\n\n\n\n\n# Plot colorbar\n# --------------\ncbar = plt.colorbar(sc, ax=ax, orientation=\"horizontal\", pad=.1, fraction=0.06,ticks=[200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310])\n#cbar = plt.colorbar(sc, ax=ax, orientation=\"horizontal\", pad=.1, fraction=0.06,ticks=[-3, -2.5, -2, -1.5, -1, -0.5, 0, 0.5, 1.0, 1.5, 2.0, 2.5, 3 ])\n#cbar = plt.colorbar(sc, ax=ax, orientation=\"horizontal\", pad=.1, fraction=0.06,ticks=[0, 10, 20, 20, 40, 50, 60, 70, 80, 90, 100])\ncbar.ax.set_ylabel(units, fontsize=10)\n# Plot globally\n# --------------\n#ax.set_global()\n#ax.set_extent(conus)\nax.set_extent(conus_12km)\n\n# Draw coastlines\n# ----------------\nax.coastlines()\nax.text(0.45, -0.1, 'Longitude', transform=ax.transAxes, ha='left')\nax.text(-0.08, 0.4, 'Latitude', transform=ax.transAxes,\n        rotation='vertical', va='bottom')\n\n#text = f\"Total Count:{datcont:0.0f}, Max/Min/Mean/Std: {datma:0.3f}/{datmi:0.3f}/{omean:0.3f}/{stdev:0.3f} {units}\"\n#print(text)\n#ax.text(0.67, -0.1, text, transform=ax.transAxes, va='bottom', fontsize=6.2)\n\ndpi=150\ngl.top_labels = False\nplt.tight_layout()\n\n# show plot\n# -----------\n# pname='test.png'\n# plt.savefig(pname, dpi=dpi)                          ","type":"content","url":"/notebooks/jedi-obsspace#plot-satellite-radiance-observations","position":15},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray"},"type":"lvl1","url":"/notebooks/mpas-advanced","position":0},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray"},"content":"","type":"content","url":"/notebooks/mpas-advanced","position":1},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"In this section, you’ll learn:"},"type":"lvl3","url":"/notebooks/mpas-advanced#in-this-section-youll-learn","position":2},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"In this section, you’ll learn:"},"content":"Utilizing the UXarray package to perform advanced analysis over MPAS data, such as cross-sections and zonal averages, etc.\n\nUsing Matplotlib and hvPlot to visualize analysis.\n### Related Documentation\n\n* [URL title](URL)\n* \n","type":"content","url":"/notebooks/mpas-advanced#in-this-section-youll-learn","position":3},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Prerequisites"},"type":"lvl3","url":"/notebooks/mpas-advanced#prerequisites","position":4},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nUXarray\n\nNecessary\n\n\n\nSciPy\n\nHelpful\n\n\n\nHoloViews\n\nHelpful\n\n\n\nTime to learn: 15 minutes\n\n","type":"content","url":"/notebooks/mpas-advanced#prerequisites","position":5},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Import packages"},"type":"lvl2","url":"/notebooks/mpas-advanced#import-packages","position":6},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Import packages"},"content":"\n\n%%time\n\n# autoload external python modules if they changed\n%load_ext autoreload\n%autoreload 2\n\n# add ../funcs to the current path\nimport sys, os\nsys.path.append(os.path.join(os.getcwd(), \"..\")) \n\nimport warnings\nimport math\n\nimport cartopy.crs as ccrs\nimport geoviews as gv\nimport geoviews.feature as gf\nimport matplotlib.pyplot as plt\n\nimport s3fs\n\nimport geopandas as gp\nimport numpy as np\nimport uxarray as ux\nimport xarray as xr\n\nhvPlot\n\nhvPlot is a high-level API built on HoloViews that provides interactive plots. It is integrated directly with UXarray through its .plot() functionality, similar to .plot() in Pandas.\n\nTo plot data represent in Xarray using hvPlot, we can import hvplot.xarray, which will attach a .hvplot() accessor to Xarray objects and allow for plots to be configured alongside UXarray.\n\n%%time\nimport holoviews as hv\nimport hvplot.xarray\nfrom holoviews import opts\n\n# hv.extension(\"bokeh\")\n\n","type":"content","url":"/notebooks/mpas-advanced#import-packages","position":7},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Configure visualization tools"},"type":"lvl2","url":"/notebooks/mpas-advanced#configure-visualization-tools","position":8},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Configure visualization tools"},"content":"\n\n# common border lines\ncoast_lines = gf.coastline(projection=ccrs.PlateCarree(), line_width=1, scale=\"50m\")\nstate_lines = gf.states(\n    projection=ccrs.PlateCarree(), line_width=1, line_color=\"gray\", scale=\"50m\"\n)\n\nHint\n\nWe use the unstructured-grid analysis data hosted by the Jetstream2 S3 bucket repository using UXaray. The data is executed by \n\nMPAS over the CONUS (contiguous United States) with a resolution of 12 kilometres, which is stored in the NetCDF format.\n\nFor more information about the UXarray and unstructured grid, please go to \n\nWorking with unstructured grids with UXarray.\n\n","type":"content","url":"/notebooks/mpas-advanced#configure-visualization-tools","position":9},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl2","url":"/notebooks/mpas-advanced#retrieve-load-mpas-jedi-data","position":10},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"The example MPAS/JEDI data are stored at \n\njetstream2. We need to retreive those data first.There are two ways to retrieve MPAS data:\n\nDownload all example data from JetStream2 to local and them load them locally. This approach allows downloading the data once per machine and reuse it in notebooks.\n\nStream the JetStream2 S3 objects on demand. In this case, each notebook (including restarting a notebook) will retrieve the required data separately as needed.\n\n# choose the data_load_method, check the above cell for details. Default to method 2; use 1 if running this on your own machine\ndata_load_method = 2  # 1 or 2\n\n","type":"content","url":"/notebooks/mpas-advanced#retrieve-load-mpas-jedi-data","position":11},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Method 1: Download all example data once and reuse it in mulptile notebooks","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl3","url":"/notebooks/mpas-advanced#method-1-download-all-example-data-once-and-reuse-it-in-mulptile-notebooks","position":12},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Method 1: Download all example data once and reuse it in mulptile notebooks","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"\n\n%%time\nlocal_dir = \"/tmp\"\n\nif data_load_method == 1 and not os.path.exists(\n    local_dir + \"/conus12km/bkg/mpasout.2024-05-06_01.00.00.nc\"\n):\n    jetstream_url = \"https://js2.jetstream-cloud.org:8001/\"\n    fs = s3fs.S3FileSystem(\n        anon=True, asynchronous=False, client_kwargs=dict(endpoint_url=jetstream_url)\n    )\n    conus12_path = \"s3://pythia/mpas/conus12km\"\n    fs.get(conus12_path, local_dir, recursive=True)\n    print(\"Data downloading completed\")\nelse:\n    print(\"Skip..., either data is available in local or data_load_method is NOT 1\")\n\n# Set file path\nif data_load_method == 1:\n    grid_file = local_dir + \"/conus12km/conus12km.invariant.nc_L60_GFS\"\n    ana_file = local_dir + \"/conus12km/bkg/mpasout.2024-05-06_01.00.00.nc\"\n    bkg_file = local_dir + \"/conus12km/ana/mpasout.2024-05-06_01.00.00.nc\"\n    # jdiag_file = local_dir + \"/conus12km/jdiag_aircar_t133.nc\"  #q133.nc or uv233.nc\n\n","type":"content","url":"/notebooks/mpas-advanced#method-1-download-all-example-data-once-and-reuse-it-in-mulptile-notebooks","position":13},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Method 2: Stream the JetStream2 S3 objects on demand","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl3","url":"/notebooks/mpas-advanced#method-2-stream-the-jetstream2-s3-objects-on-demand","position":14},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Method 2: Stream the JetStream2 S3 objects on demand","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"\n\n%%time\nif data_load_method == 2:\n    jetstream_url = \"https://js2.jetstream-cloud.org:8001/\"\n    fs = s3fs.S3FileSystem(\n        anon=True, asynchronous=False, client_kwargs=dict(endpoint_url=jetstream_url)\n    )\n    conus12_path = \"s3://pythia/mpas/conus12km\"\n\n    grid_url = f\"{conus12_path}/conus12km.invariant.nc_L60_GFS\"\n    bkg_url = f\"{conus12_path}/bkg/mpasout.2024-05-06_01.00.00.nc\"\n    ana_url = f\"{conus12_path}/ana/mpasout.2024-05-06_01.00.00.nc\"\n    # jdiag_url=f\"{conus12_path}/jdiag_aircar_t133.nc\"\n\n    grid_file = fs.open(grid_url)\n    ana_file = fs.open(ana_url)\n    bkg_file = fs.open(bkg_url)\n    # jdiag_file = fs.open(jdiag_url)\nelse:\n    print(\"Skip..., data_load_method is NOT 2\")\n\nWarning\n\nDepending on the network conditions, loading the data can take a few minutes.\n\n","type":"content","url":"/notebooks/mpas-advanced#method-2-stream-the-jetstream2-s3-objects-on-demand","position":15},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Loading the data into UXarray datasets","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl3","url":"/notebooks/mpas-advanced#loading-the-data-into-uxarray-datasets","position":16},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Loading the data into UXarray datasets","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"We use the UXarray data structures for working with the data. This package supports data defined over unstructured grid and provides utilities for modifying and visualizing it. The available functionality are discussed in \n\nUxDataset documentation.\nFor more information about the UXarray and unstructured grid, please go to \n\nWorking with unstructured grids with UXarray.\n\nuxds = ux.open_dataset(grid_file, bkg_file)\n\n# We will extract the potential temperature `theta` from the analysis data from MPAS and convert it from Kelvin to Celsius.\nuxvar = uxds[\"theta\"].isel(Time=0) - 273.15  ## Kelvin to Celsius\n\n","type":"content","url":"/notebooks/mpas-advanced#loading-the-data-into-uxarray-datasets","position":17},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Basic information","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl3","url":"/notebooks/mpas-advanced#basic-information","position":18},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Basic information","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"\n\nmin_lat, max_lat = float(uxvar.uxgrid.face_lat.min()), float(\n    uxvar.uxgrid.face_lat.max()\n)\nmin_lon, max_lon = float(uxvar.uxgrid.face_lon.min()), float(\n    uxvar.uxgrid.face_lon.max()\n)\nprint(\n    f\"The data is over \"\n    + f\"{abs(min_lat):.1f}°{'N' if min_lat >= 0 else 'S'}~{abs(max_lat):.1f}°{'N' if max_lat >= 0 else 'S'}\"\n    + f\", \"\n    + f\"{min_lon:.1f}°{'E' if min_lon >= 0 else 'W'}~{max_lon:.1f}°{'E' if max_lon >= 0 else 'W'}\"\n)\n\n","type":"content","url":"/notebooks/mpas-advanced#basic-information","position":19},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Indexing and selecting","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl3","url":"/notebooks/mpas-advanced#indexing-and-selecting","position":20},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Indexing and selecting","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"\n\n","type":"content","url":"/notebooks/mpas-advanced#indexing-and-selecting","position":21},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl4":"Subset a latitudinal band of","lvl3":"Indexing and selecting","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl4","url":"/notebooks/mpas-advanced#subset-a-latitudinal-band-of","position":22},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl4":"Subset a latitudinal band of","lvl3":"Indexing and selecting","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"\n\niVertLevel = 0\nuxvar_slice1 = uxvar.isel(nVertLevels=iVertLevel).subset.constant_latitude_interval(\n    lats=(int(min_lat + 10), int(max_lat - 10))\n)\n\ntext1 = hv.Text(x=-125, y=31, text=\"slice 1\", fontsize=13)\n\n(\n    (\n        uxvar_slice1.plot(\n            cmap=\"inferno\",\n            height=250,\n            width=500,\n            ylim=(int(min_lat), int(max_lat) + 1),\n        ).opts(colorbar_position=\"left\")\n        * coast_lines\n        * state_lines\n    ).opts(\n        title=\" Latitudinal Slices\",\n        shared_axes=True,\n    )\n)\n\n","type":"content","url":"/notebooks/mpas-advanced#subset-a-latitudinal-band-of","position":23},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Vertical cross section"},"type":"lvl2","url":"/notebooks/mpas-advanced#vertical-cross-section","position":24},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Vertical cross section"},"content":"Based on UXarray, we will generate cross-sections:\n\nalong an arbitrary great‑circle arcs (GCAs) between two point over the sphere surface.\n\nalong a constant longitude or latitude line and\n\nWe will also mark the lines or arcs over a map.\n\nHint\n\nWe assume that you have already gone over the previous section, Basic MPAS analysis and visualization with UXarray. If not and if you need to learn about basic indexing, selecting, and generating horizontal figures of variables, we recommend to check that section first.\n\n","type":"content","url":"/notebooks/mpas-advanced#vertical-cross-section","position":25},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Random Great Circle Arc (GCA)","lvl2":"Vertical cross section"},"type":"lvl3","url":"/notebooks/mpas-advanced#random-great-circle-arc-gca","position":26},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Random Great Circle Arc (GCA)","lvl2":"Vertical cross section"},"content":"Let us use UXarray’s vertical cross-section function to get a cross-section over a great circle arc:\n\n%%time\n\nstart_point = (-56.0, 46.0)  # (start_lon, start_lat)\nend_point = (-80.0, 30.0)  # (end_lon,end_lat)\nstep_between_points = 100\n\ncross_section_gca = uxvar.cross_section(\n    start=start_point, end=end_point, steps=step_between_points\n)\n\nUXarray’s cross-section returns an xarray.DataArray that can then be plotted:\n\nhlabelticks = [\n    f\"{abs(lat):.1f}°{'N' if lat >= 0 else 'S'}\\n{abs(lon):.1f}°{'E' if lon >= 0 else 'W'}\"\n    for lat, lon in zip(cross_section_gca[\"lat\"], cross_section_gca[\"lon\"])\n]\n\ntick_stride = 10\n\ncross_section_gca = cross_section_gca.assign_coords(\n    {\n        \"steps\": cross_section_gca[\"steps\"].values,\n        \"nVertLevels\": range(cross_section_gca.shape[1]),\n    }\n)\n\ncross_section_gca.hvplot.contourf(\n    x=\"steps\",\n    y=\"nVertLevels\",\n    cmap=\"inferno_r\",\n    levels=range(5, 300, 20),\n    title=\"Cross-section from \"\n    + f\"({abs(start_point[1]):.1f}°{'S' if start_point[1] < 0 else 'N'},{abs(start_point[0]):.1f}°{'W' if start_point[0] < 0 else 'E'})\"\n    + \" to \"\n    + f\"({abs(end_point[1]):.1f}°{'S' if end_point[1] < 0 else 'N'},{abs(end_point[0]):.1f}°{'W' if end_point[0] < 0 else 'E'})\",\n).opts(\n    xlabel=\"steps\",\n    xticks=list(\n        zip(\n            cross_section_gca[\"steps\"].values[::tick_stride], hlabelticks[::tick_stride]\n        )\n    ),\n)\n\n","type":"content","url":"/notebooks/mpas-advanced#random-great-circle-arc-gca","position":27},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Constant Latitude","lvl2":"Vertical cross section"},"type":"lvl3","url":"/notebooks/mpas-advanced#constant-latitude","position":28},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Constant Latitude","lvl2":"Vertical cross section"},"content":"\n\nlat = 43.3\nstep_between_points = 400\n\ncross_section_lat = uxvar.cross_section(lat=lat, steps=step_between_points)\n\nhlabelticks = [\n    f\"{abs(lon):.1f}°{'E' if lon >= 0 else 'W'}\" for lon in cross_section_lat[\"lon\"]\n]\ntick_stride = 10\ncross_section_lat = cross_section_lat.assign_coords(\n    {\n        \"steps\": cross_section_lat[\"lon\"].values,\n        \"nVertLevels\": range(cross_section_lat.shape[1]),\n    }\n)\n\ntick_stride = 10\ncross_section_lat.hvplot.contourf(\n    x=\"steps\",\n    y=\"nVertLevels\",\n    cmap=\"inferno_r\",\n    levels=range(5, 300, 20),\n    title=f\"Cross-section at {abs(lat):.1f}°{'S' if lat < 0 else 'N'}\",\n).opts(\n    xlabel=\"longitudes\",\n    xticks=list(\n        zip(cross_section_lat[\"lon\"].values[::tick_stride], hlabelticks[::tick_stride])\n    ),\n)\n\n","type":"content","url":"/notebooks/mpas-advanced#constant-latitude","position":29},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Constant Longitude","lvl2":"Vertical cross section"},"type":"lvl3","url":"/notebooks/mpas-advanced#constant-longitude","position":30},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Constant Longitude","lvl2":"Vertical cross section"},"content":"\n\n%%time\nlon = -83.3\nstep_between_points = 400\ncross_section_lon = uxvar.cross_section(lon=lon, steps=step_between_points)\n\nhlabelticks = [\n    f\"{abs(lat):.1f}°{'N' if lat >= 0 else 'S'}\" for lat in cross_section_lon[\"lat\"]\n]\n\n# Create labeled coordinates for plotting\ncross_section_lon = cross_section_lon.assign_coords(\n    {\n        \"steps\": cross_section_lon[\"lat\"].values,\n        \"nVertLevels\": range(cross_section_lon[\"nVertLevels\"].shape[0]),\n    }\n)\n\ntick_stride = 10\ncross_section_lon.hvplot.contourf(\n    x=\"steps\",\n    y=\"nVertLevels\",\n    cmap=\"inferno_r\",\n    levels=range(5, 300, 20),\n    title=f\"Cross-section at {abs(lon):.1f}°{'W' if lon < 0 else 'E'}\",\n).opts(\n    xlabel=\"latitudes\",\n    xticks=list(\n        zip(\n            cross_section_lon[\"steps\"].values[::tick_stride], hlabelticks[::tick_stride]\n        )\n    ),\n)\n\n","type":"content","url":"/notebooks/mpas-advanced#constant-longitude","position":31},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Zonal Average"},"type":"lvl2","url":"/notebooks/mpas-advanced#zonal-average","position":32},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl2":"Zonal Average"},"content":"In this session we use the first level:\n\niVertLevel = 0\nuxvar_slice = uxvar.isel(nVertLevels=iVertLevel)\n\nzonal_mean_uxvar = uxvar_slice.zonal_mean(lat=(int(min_lat), int(max_lat), 1))\n(zonal_mean_uxvar.plot.line() * zonal_mean_uxvar.plot.scatter(color=\"red\")).opts(\n    title=\"Zonal Average Plot\",\n    xticks=np.arange(min_lat, max_lat + 20, 20),\n    xlim=(min_lat - 5, max_lat + 5),\n)\n\nA panel plot\n\nplot = uxvar_slice.plot(\n    cmap=\"inferno_r\",\n    colorbar=True,\n    title=f\"Potential Temperature at Level {iVertLevel:d}, {str(uxvar['Time'].values)[:20]}\",\n)\nplot * coast_lines * state_lines\n\nzonal_mean uses a face-weighted average\n\n(\n    uxvar_slice.plot(\n        cmap=\"inferno\",\n        height=250,\n        width=500,\n        xlim=(int(min_lon - 5), int(max_lon) + 5),\n        ylim=(int(min_lat - 5), int(max_lat) + 5),\n    ).opts(colorbar_position=\"left\")\n    * coast_lines\n    * state_lines\n    + zonal_mean_uxvar.plot.line(\n        x=\"theta_zonal_mean\",\n        y=\"latitudes\",\n        height=250,\n        width=150,\n        ylabel=\"\",\n        ylim=(int(min_lat - 5), int(max_lat) + 5),\n        grid=True,\n    )\n).opts(\n    title=\"Combined Raster and Zonal Average Plot\",\n    shared_axes=True,\n)\n\nface_weighted_zonal_mean = uxvar_slice.weighted_mean()\n\n","type":"content","url":"/notebooks/mpas-advanced#zonal-average","position":33},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Zonal Anomalous Component","lvl2":"Zonal Average"},"type":"lvl3","url":"/notebooks/mpas-advanced#zonal-anomalous-component","position":34},{"hierarchy":{"lvl1":"Advanced MPAS Analysis & Visualization with UXarray","lvl3":"Zonal Anomalous Component","lvl2":"Zonal Average"},"content":"The total field \\theta_{i,j} at any grid could be decomposed into the zonal average, \\bar{\\theta_i}, and the deviations from the zonal average \\theta^\\prime_{i,j}, where i,j represent the latitudinal and longitudinal coordinates, correspondingly.\\theta_{i,j}=\\bar{\\theta_{i}}+\\theta^{\\prime}_{i,j}\n\nWarning\n\nThis method provides a rough check of zonal anomalies by assigning fine-grid values to coarse zonal bins using simple binning logic. It’s useful for quick diagnostics, but it does not yield the accurate zonal anomaly which requires remapping operations. See other notebooks for more references.\n\n# Get latitudes for each face\nface_lats = uxvar_slice.uxgrid.face_lat.values  # shape: (n_face,)\n\n# display(zonal_mean_uxvar)\n\nlat_bins = zonal_mean_uxvar[\"latitudes\"]\nlat_bin_indices = np.digitize(face_lats, lat_bins) - 1\n\n# Clip to valid range\nlat_bin_indices = np.clip(lat_bin_indices, 0, len(lat_bins) - 1)\n\n# Map zonal mean to each face\nzonal_mean_per_face = zonal_mean_uxvar.values[lat_bin_indices]\n\n# Subtract to get anomaly\nuxvar_anomaly = uxvar_slice - zonal_mean_per_face\n\n(\n    uxvar_anomaly.plot(\n        cmap=\"CoolWarm\",\n        height=250,\n        width=500,\n        xlim=(int(min_lon - 5), int(max_lon) + 5),\n        ylim=(int(min_lat - 5), int(max_lat) + 5),\n    ).opts(colorbar_position=\"left\")\n    * coast_lines\n    * state_lines\n    + zonal_mean_uxvar.plot.line(\n        x=\"theta_zonal_mean\",\n        y=\"latitudes\",\n        height=250,\n        width=150,\n        ylabel=\"\",\n        ylim=(int(min_lat - 5), int(max_lat) + 5),\n        grid=True,\n    )\n).opts(\n    title=\"Combined Zonal Anomaly & Zonal Average Plot\",\n)","type":"content","url":"/notebooks/mpas-advanced#zonal-anomalous-component","position":35},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray"},"type":"lvl1","url":"/notebooks/mpas-basic","position":0},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray"},"content":"","type":"content","url":"/notebooks/mpas-basic","position":1},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"In this section, you’ll learn:"},"type":"lvl3","url":"/notebooks/mpas-basic#in-this-section-youll-learn","position":2},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"In this section, you’ll learn:"},"content":"How to interact with MPAS data: retrieving, subsetting and storing data\n\nHow to visualize horizontal data, i.e. data from a single altitude uncomment if there is any related Documentation\n### Related Documentation\n\n* [URL title](URL)\n* \n","type":"content","url":"/notebooks/mpas-basic#in-this-section-youll-learn","position":3},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"Prerequisites"},"type":"lvl3","url":"/notebooks/mpas-basic#prerequisites","position":4},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nUXarray\n\nNecessary\n\n\n\nUnstructured Grid\n\nNecessary\n\n\n\nTime to learn: 5 minutes\n\n","type":"content","url":"/notebooks/mpas-basic#prerequisites","position":5},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Import packages"},"type":"lvl2","url":"/notebooks/mpas-basic#import-packages","position":6},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Import packages"},"content":"We use Cartopy, GeoViews, Holoviews and Matplotlib packages for visualization. Xarray, UXarray, NumPy and GeoPandas are used for the data structures we use to represent and manipulate the data.\n\n# autoload external python modules if they changed\n%load_ext autoreload\n%autoreload 2\n\nimport os\nimport sys\n\nsys.path.append(os.path.join(os.getcwd(), \"..\"))\n\nimport math\n\nimport cartopy.crs as ccrs\nimport geoviews.feature as gf\nimport holoviews as hv\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport s3fs\nimport uxarray as ux\n\n","type":"content","url":"/notebooks/mpas-basic#import-packages","position":7},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Retrieving the state outlines and coastlines"},"type":"lvl2","url":"/notebooks/mpas-basic#retrieving-the-state-outlines-and-coastlines","position":8},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Retrieving the state outlines and coastlines"},"content":"\n\ncoast_lines = gf.coastline(projection=ccrs.PlateCarree(), line_width=1, scale=\"50m\")\nstate_lines = gf.states(\n    projection=ccrs.PlateCarree(), line_width=1, line_color=\"gray\", scale=\"50m\"\n)\n\n","type":"content","url":"/notebooks/mpas-basic#retrieving-the-state-outlines-and-coastlines","position":9},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Helper functions"},"type":"lvl2","url":"/notebooks/mpas-basic#helper-functions","position":10},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Helper functions"},"content":"The following functions are used for visualizing the data. The horizontal_contour function generates the contour map for a given slice of data.\n\n# Generates a contour plot for a horizontal slice\n\n\ndef horizontal_contour(\n    ux_hslice,\n    title,\n    cmin=None,\n    cmax=None,\n    width=800,\n    height=500,\n    clevs=20,\n    cmap=\"coolwarm\",\n    symmetric_cmap=False,\n):\n\n    # Get min and max\n    amin = ux_hslice.min().item()\n    amax = ux_hslice.max().item()\n\n    cmin = math.floor(amin) if (cmin is None) else cmin\n    cmax = math.ceil(amax) if (cmax is None) else cmax\n\n    if symmetric_cmap:  # get a symmetric color map when cmin < 0, cmax >0\n        cmax = max(abs(cmin), cmax)\n        cmin = -cmax\n\n    if isinstance(cmap, str):\n        cmap = plt.get_cmap(cmap)\n\n    # Generate contour plot\n    title = f\" min={amin:.1f} max={amax:.1f}\"\n\n    contour_plot = hv.operation.contours(\n        ux_hslice.plot(),\n        levels=np.linspace(cmin, cmax, num=clevs),  # levels=np.arange(cmin, cmax, 0.5)\n        filled=True,\n    ).opts(\n        line_color=None,  # line_width=0.001\n        width=width,\n        height=height,\n        cmap=\"coolwarm\",\n        clim=(cmin, cmax),\n        colorbar=True,\n        show_legend=False,\n        tools=[\"hover\"],\n        title=title,\n    )\n\n    return contour_plot\n\n","type":"content","url":"/notebooks/mpas-basic#helper-functions","position":11},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl2","url":"/notebooks/mpas-basic#retrieve-load-mpas-jedi-data","position":12},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"The example MPAS/JEDI data are stored at \n\njetstream2. We need to retreive those data first.There are two ways to retrieve MPAS data:\n\nDownload all example data from JetStream2 to local and them load them locally. This approach allows downloading the data once per machine and reuse it in notebooks.\n\nStream the JetStream2 S3 objects on demand. In this case, each notebook (including restarting a notebook) will retrieve the required data separately as needed.\n\n# choose the data_load_method, check the above cell for details. Default to method 2; choose 1 if running from you own machine.\ndata_load_method = 2  # 1 or 2\n\n","type":"content","url":"/notebooks/mpas-basic#retrieve-load-mpas-jedi-data","position":13},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"Method 1: Download all example data once and reuse it in mulptile notebooks","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl3","url":"/notebooks/mpas-basic#method-1-download-all-example-data-once-and-reuse-it-in-mulptile-notebooks","position":14},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"Method 1: Download all example data once and reuse it in mulptile notebooks","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"\n\n%%time\nlocal_dir = \"/tmp\"\n\nif data_load_method == 1 and not os.path.exists(\n    local_dir + \"/conus12km/bkg/mpasout.2024-05-06_01.00.00.nc\"\n):\n    jetstream_url = \"https://js2.jetstream-cloud.org:8001/\"\n    fs = s3fs.S3FileSystem(\n        anon=True, asynchronous=False, client_kwargs=dict(endpoint_url=jetstream_url)\n    )\n    conus12_path = \"s3://pythia/mpas/conus12km\"\n    fs.get(conus12_path, local_dir, recursive=True)\n    print(\"Data downloading completed\")\nelse:\n    print(\"Skip..., either data is available in local or data_load_method is NOT 1\")\n\n# Set file path\nif data_load_method == 1:\n    grid_file = local_dir + \"/conus12km/conus12km.invariant.nc_L60_GFS\"\n    ana_file = local_dir + \"/conus12km/bkg/mpasout.2024-05-06_01.00.00.nc\"\n    bkg_file = local_dir + \"/conus12km/ana/mpasout.2024-05-06_01.00.00.nc\"\n    # jdiag_file = local_dir + \"/conus12km/jdiag_aircar_t133.nc\"  #q133.nc or uv233.nc\n\n","type":"content","url":"/notebooks/mpas-basic#method-1-download-all-example-data-once-and-reuse-it-in-mulptile-notebooks","position":15},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"Method 2: Stream the JetStream2 S3 objects on demand","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl3","url":"/notebooks/mpas-basic#method-2-stream-the-jetstream2-s3-objects-on-demand","position":16},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"Method 2: Stream the JetStream2 S3 objects on demand","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"\n\n%%time\nif data_load_method == 2:\n    jetstream_url = \"https://js2.jetstream-cloud.org:8001/\"\n    fs = s3fs.S3FileSystem(\n        anon=True, asynchronous=False, client_kwargs=dict(endpoint_url=jetstream_url)\n    )\n    conus12_path = \"s3://pythia/mpas/conus12km\"\n\n    grid_url = f\"{conus12_path}/conus12km.invariant.nc_L60_GFS\"\n    bkg_url = f\"{conus12_path}/bkg/mpasout.2024-05-06_01.00.00.nc\"\n    ana_url = f\"{conus12_path}/ana/mpasout.2024-05-06_01.00.00.nc\"\n    # jdiag_url=f\"{conus12_path}/jdiag_aircar_t133.nc\"\n\n    grid_file = fs.open(grid_url)\n    ana_file = fs.open(ana_url)\n    bkg_file = fs.open(bkg_url)\n    # jdiag_file = fs.open(jdiag_url)\nelse:\n    print(\"Skip..., data_load_method is NOT 2\")\n\nWarning\n\nDepending on the network conditions, loading the data can take a few minutes.\n\n","type":"content","url":"/notebooks/mpas-basic#method-2-stream-the-jetstream2-s3-objects-on-demand","position":17},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"Loading the data into UXarray datasets","lvl2":"Retrieve/load  MPAS/JEDI data"},"type":"lvl3","url":"/notebooks/mpas-basic#loading-the-data-into-uxarray-datasets","position":18},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl3":"Loading the data into UXarray datasets","lvl2":"Retrieve/load  MPAS/JEDI data"},"content":"We use the UXarray data structures for working with the data. This package supports data defined over unstructured grid and provides utilities for modifying and visualizing it. The available fucntionality are discussed in \n\nUxDataset documentation.\n\nuxds_a = ux.open_dataset(grid_file, ana_file)\nuxds_b = ux.open_dataset(grid_file, bkg_file)\n\n","type":"content","url":"/notebooks/mpas-basic#loading-the-data-into-uxarray-datasets","position":19},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Regional temperature contour"},"type":"lvl2","url":"/notebooks/mpas-basic#regional-temperature-contour","position":20},{"hierarchy":{"lvl1":"Basic MPAS Analysis & Visualization with UXarray","lvl2":"Regional temperature contour"},"content":"\n\nWe use the theta (potential temperature) variable from this dataset, which has a (Time, n_face, nVertLevels), i.e. Time * Number of grid faces * Number of vertical levels dimensionality to have a look at a regional, horizontal plot.\n\nuxvar = uxds_a[\"theta\"] - 273.15  ## Kelvin to Celsius\n\nThe data has multiple vertical layers, representing the values for multiple elevation levels. In this section, we are focusing on a single level. Next, we are plotting the contour of theta values in the data for this fixed level.\n\ni_lev = 0  # `nVertLevels` index, for picking the 0th level\ni_time = 0  # `Time` index\nlat_level, long_level = (\n    42.63,\n    -108,\n)  # The latitude and longitude levels we will use in the next section\n\nplot = horizontal_contour(\n    uxvar.isel(Time=0, nVertLevels=i_lev),\n    title=f\"Contour plot for potential temperature over a region at vertical level 0\",\n)  # , symmetric_cmap=True)\nlat_line = hv.Curve(([-134, -61], [lat_level, lat_level])).opts(\n    line_width=3, color=\"black\"\n)\nlong_line = hv.Curve(([long_level, long_level], [20, 57])).opts(\n    line_width=3, color=\"black\"\n)\nplot * coast_lines * state_lines * lat_line * long_line\n\nNote\n\nIn the next section, we will work on processing multiple vertical layers via cross-sections. The vertical black lines on the map show the latitude and longitude values we will take the vertical slices over in those exercises.","type":"content","url":"/notebooks/mpas-basic#regional-temperature-contour","position":21},{"hierarchy":{"lvl1":"JEDI Overview"},"type":"lvl1","url":"/notebooks/overview-jedi","position":0},{"hierarchy":{"lvl1":"JEDI Overview"},"content":"","type":"content","url":"/notebooks/overview-jedi","position":1},{"hierarchy":{"lvl1":"JEDI Overview","lvl2":"In this section, you’ll learn:"},"type":"lvl2","url":"/notebooks/overview-jedi#in-this-section-youll-learn","position":2},{"hierarchy":{"lvl1":"JEDI Overview","lvl2":"In this section, you’ll learn:"},"content":"What’s JEDI?","type":"content","url":"/notebooks/overview-jedi#in-this-section-youll-learn","position":3},{"hierarchy":{"lvl1":"JEDI Overview","lvl2":"Related Documentation"},"type":"lvl2","url":"/notebooks/overview-jedi#related-documentation","position":4},{"hierarchy":{"lvl1":"JEDI Overview","lvl2":"Related Documentation"},"content":"JEDI documentation)\n\n","type":"content","url":"/notebooks/overview-jedi#related-documentation","position":5},{"hierarchy":{"lvl1":"JEDI Overview","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/overview-jedi#prerequisites","position":6},{"hierarchy":{"lvl1":"JEDI Overview","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nData Assimilation\n\nHelpful\n\n\n\nJEDI\n\nHelpful\n\n\n\nTime to learn: 5 minutes\n\nThe following introduction is adapted from the JEDI documentation (\n\nhttps://​jointcenterforsatellitedataassimilation​-jedi​-docs​.readthedocs​-hosted​.com​/en​/latest/).\n\nJoint Effort for Data assimilation Integration (JEDI) is a unified and versatile data assimilation (DA) system for Earth System Prediction. The JEDI software package can be run on a variety of platforms from laptops to supercomputers, for a variety of purposes, from teaching and learning DA fundamentals to the development and validation of new DA algorithms and observational operators, to leading-edge atmospheric and oceanic research, to operational weather forecasting. It is designed to readily accommodate new atmospheric and oceanic models and new observation systems.\n\nJEDI is developed and distributed by the Joint Center for Satellite Data Assimilation (JCSDA, \n\nhttps://​www​.jcsda​.org/) , a multi-agency research center hosted by the University Corporation for Atmospheric Research (UCAR, \n\nhttps://​www​.ucar​.edu/). JCSDA is dedicated to improving and accelerating the quantitative use of research and operational satellite data in weather, ocean, climate and environmental analysis and prediction systems.\n\nReaders are recommended to check the above JEDI Documentation for more details.","type":"content","url":"/notebooks/overview-jedi#prerequisites","position":7},{"hierarchy":{"lvl1":"MPAS Overview"},"type":"lvl1","url":"/notebooks/overview-mpas","position":0},{"hierarchy":{"lvl1":"MPAS Overview"},"content":"In this first section of the cookbook, we would like to provide an introduction to \n\nModel for Prediction Across Scales (MPAS). Please note, instead of trying to replicate what has already been made available by the MPAS user and developer community, we will point this cookbooks’s readers to the right direction to access such resources.\n\n","type":"content","url":"/notebooks/overview-mpas","position":1},{"hierarchy":{"lvl1":"MPAS Overview","lvl3":"In this section, you’ll not code but learn:"},"type":"lvl3","url":"/notebooks/overview-mpas#in-this-section-youll-not-code-but-learn","position":2},{"hierarchy":{"lvl1":"MPAS Overview","lvl3":"In this section, you’ll not code but learn:"},"content":"What is MPAS?\n\nWhy MPAS?","type":"content","url":"/notebooks/overview-mpas#in-this-section-youll-not-code-but-learn","position":3},{"hierarchy":{"lvl1":"MPAS Overview","lvl3":"Related Documentation"},"type":"lvl3","url":"/notebooks/overview-mpas#related-documentation","position":4},{"hierarchy":{"lvl1":"MPAS Overview","lvl3":"Related Documentation"},"content":"MPAS Homepage\n\nMPAS Documentation\n\nMPAS Publications\n\nMPAS Support Forum","type":"content","url":"/notebooks/overview-mpas#related-documentation","position":5},{"hierarchy":{"lvl1":"MPAS Overview","lvl3":"Prerequisites"},"type":"lvl3","url":"/notebooks/overview-mpas#prerequisites","position":6},{"hierarchy":{"lvl1":"MPAS Overview","lvl3":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nIntroduction to Unstructured Grids\n\nHelpful\n\n\n\nTime to learn: 10 minutes\n\n\n\n","type":"content","url":"/notebooks/overview-mpas#prerequisites","position":7},{"hierarchy":{"lvl1":"MPAS Overview","lvl2":"What is MPAS?"},"type":"lvl2","url":"/notebooks/overview-mpas#what-is-mpas","position":8},{"hierarchy":{"lvl1":"MPAS Overview","lvl2":"What is MPAS?"},"content":"\n\nThe Model for Prediction Across Scales (MPAS) is a collaborative project for developing atmosphere, ocean and other earth-system simulation components for use in climate, regional climate and weather studies.\n\nThe defining features of MPAS are the unstructured \n\nVoronoi meshes and \n\nC-grid discretization used as the basis for many of the model components. The unstructured Voronoi meshes, formally Spherical Centriodal Voronoi Tessellations (SCVTs), allow for both quasi-uniform discretization of the sphere and local refinement. The C-grid discretization, where the normal component of velocity on cell edges is prognosed, is especially well-suited for higher-resolution, mesoscale atmosphere and ocean simulations.\n\nThe land ice model takes advantage of the SCVT-dual mesh, which is a triangular Delaunay tessellation appropriate for use with Finite-Element-based discretizations.\n\nBe sure to check out the \n\nMPAS home page and the References at the end of this section for further details.\n\nImage credit: \n\nhttps://​mpas​-dev​.github​.io​/atmosphere​/atmosphere​.html\n\n","type":"content","url":"/notebooks/overview-mpas#what-is-mpas","position":9},{"hierarchy":{"lvl1":"MPAS Overview","lvl2":"Why MPAS?"},"type":"lvl2","url":"/notebooks/overview-mpas#why-mpas","position":10},{"hierarchy":{"lvl1":"MPAS Overview","lvl2":"Why MPAS?"},"content":"\n\nThe key features of MPAS are:\n\nSuitability for global and regional analysis\n\nApplicability to weather and climate research\n\nVariable resolution\n\nScalability\n\n","type":"content","url":"/notebooks/overview-mpas#why-mpas","position":11},{"hierarchy":{"lvl1":"MPAS Overview","lvl2":"References"},"type":"lvl2","url":"/notebooks/overview-mpas#references","position":12},{"hierarchy":{"lvl1":"MPAS Overview","lvl2":"References"},"content":"MPAS Mesh Specification Version 1.0, 2015\n\n","type":"content","url":"/notebooks/overview-mpas#references","position":13},{"hierarchy":{"lvl1":"MPAS Overview","lvl2":"What is next?"},"type":"lvl2","url":"/notebooks/overview-mpas#what-is-next","position":14},{"hierarchy":{"lvl1":"MPAS Overview","lvl2":"What is next?"},"content":"The \n\nnext section will provide an overview of the The Joint Effort for Data assimilation (JEDI).","type":"content","url":"/notebooks/overview-mpas#what-is-next","position":15},{"hierarchy":{"lvl1":"RRFSv2 Overview"},"type":"lvl1","url":"/notebooks/overview-rrfsv2","position":0},{"hierarchy":{"lvl1":"RRFSv2 Overview"},"content":"","type":"content","url":"/notebooks/overview-rrfsv2","position":1},{"hierarchy":{"lvl1":"RRFSv2 Overview","lvl2":"In this section, you’ll learn:"},"type":"lvl2","url":"/notebooks/overview-rrfsv2#in-this-section-youll-learn","position":2},{"hierarchy":{"lvl1":"RRFSv2 Overview","lvl2":"In this section, you’ll learn:"},"content":"What’s RRFS(v2)?\n\nWhat’s RDASApp?\n\nWhat’s rrfs-workflow?","type":"content","url":"/notebooks/overview-rrfsv2#in-this-section-youll-learn","position":3},{"hierarchy":{"lvl1":"RRFSv2 Overview","lvl2":"Related Documentation"},"type":"lvl2","url":"/notebooks/overview-rrfsv2#related-documentation","position":4},{"hierarchy":{"lvl1":"RRFSv2 Overview","lvl2":"Related Documentation"},"content":"rrfs-workflow\n\nRDASApp\n\nrrfs-workflow in depth (slides)(request access if you are not able to view the slides)","type":"content","url":"/notebooks/overview-rrfsv2#related-documentation","position":5},{"hierarchy":{"lvl1":"RRFSv2 Overview","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/overview-rrfsv2#prerequisites","position":6},{"hierarchy":{"lvl1":"RRFSv2 Overview","lvl2":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\ndata assimilation\n\nHelpful\n\n\n\nResearch to Operation\n\nHelpful\n\n\n\nTime to learn: 5 minutes\n\nNOAA has been developing the Rapid Refresh Forecast System (RRFS) to provide high-resolution, rapidly updating weather forecasts. The first version of RRFS is built on \n\nthe FV3 model) and the Gridpoint Statistical Interpolation (GSI) data assimilation system (\n\nGSI info). The next-generation RRFS, known as RRFSv2, adopts the MPAS model and the JEDI data assimilation framework. Development of RRFSv2 is a collaborative effort between NOAA’s Global Systems Laboratory (\n\nGSL) and NOAA’s Environmental Modeling Center (\n\nEMC), with the goal of operational deployment around 2028 or 2029.\n\nRRFSv2 covers a regional domain with a special resolution of around 3km. The MPAS model has being enhanced with GSL/UFS physics (\n\nlink to the UFS MPAS) to improve forecast performance. To support RRFSv2’s unique requirements, a specialized proxy application—\n\nRDASApp—has been developed. RDASApp configures and integrates JEDI components, providing the executables and tools needed to perform RRFSv2 data assimilation cycles.\n\nTo streamline reasearh and development testing as well as operational implementation, an operation-oriented, community flexible end-to-end workflow, \n\nrrfs-workflow has been developed. rrfs-workflow enables both real-time and restrospective RRFSv2 experiments, accelerating the Research to Operation (R2O) transition and fostering collaborations between research and operation.","type":"content","url":"/notebooks/overview-rrfsv2#prerequisites","position":7}]}